summarize_race <- function(data, prefix = "demo_race___", group_var, 
                           pattern = ".*=(.*)\\)", replacement = "\\1") {
  
  # Check if group_var exists
  if (!group_var %in% names(data)) {
    stop(paste0("The specified grouping variable '", group_var, "' does not exist in the data."))
  }
  
  # Handle NA values in the grouping variable by converting them to a string "Missing"
  data[[group_var]] <- ifelse(is.na(data[[group_var]]), "Missing", data[[group_var]])
  
  # Extract columns with the specific prefix
  race_columns <- grep(prefix, colnames(data), value = TRUE)
  
  # Extract race labels and then extract the actual race descriptor from the label
  race_labels <- sapply(race_columns, function(col) {
    label <- attr(data[[col]], "label")
    # Extracting text using provided pattern and replacement
    race <- gsub(pattern, replacement, label)
    return(trimws(race))
  })
  
  # Calculate counts for each race column stratified by the grouping variable
  summary_list <- lapply(race_columns, function(race_col) {
    tbl <- table(data[[group_var]], data[[race_col]])
    # Ensure all tables have the same row names for consistency
    tbl <- tbl[unique(data[[group_var]]), ]
    return(tbl)
  })

  # Convert the list to a data frame
  summary_df <- do.call(cbind, summary_list)
  colnames(summary_df) <- race_labels
  
  # Transform the data frame to a long format
  long_df <- tidyr::pivot_longer(as.data.frame(summary_df), 
                                 cols = all_of(race_labels), 
                                 names_to = "Race", 
                                 values_to = "Count")
  
  # Calculate proportions
  total_counts <- table(data[[group_var]])
  long_df$Proportion <- mapply(function(group, count) count/total_counts[group], 
                               long_df$`data[[group_var]]`, long_df$Count)
  
  return(long_df)
}
